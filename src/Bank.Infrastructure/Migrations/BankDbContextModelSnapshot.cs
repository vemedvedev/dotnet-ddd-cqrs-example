// <auto-generated />
using System;
using Bank.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bank.Infrastructure.Migrations
{
    [DbContext(typeof(BankDbContext))]
    partial class BankDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bank.Domain.AccountAggregate.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("CITEXT")
                        .HasColumnName("name");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("Bank.Domain.TransactionAggregate.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("transaction", (string)null);
                });

            modelBuilder.Entity("Bank.Domain.AccountAggregate.Account", b =>
                {
                    b.OwnsOne("Bank.Domain.AccountAggregate.AccountBalance", "AccountBalance", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<long>("AccountId")
                                .HasColumnType("bigint")
                                .HasColumnName("account_id");

                            b1.Property<decimal>("Balance")
                                .HasColumnType("numeric")
                                .HasColumnName("balance");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at")
                                .HasDefaultValueSql("CURRENT_TIMESTAMP");

                            b1.Property<uint>("Version")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("xid")
                                .HasColumnName("xmin");

                            b1.HasKey("Id");

                            b1.HasIndex("AccountId")
                                .IsUnique();

                            b1.ToTable("account_balance", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("AccountBalance")
                        .IsRequired();
                });

            modelBuilder.Entity("Bank.Domain.TransactionAggregate.Transaction", b =>
                {
                    b.OwnsMany("Bank.Domain.TransactionAggregate.TransactionLog", "TransactionLogs", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<long>("AccountId")
                                .HasColumnType("bigint")
                                .HasColumnName("account_id");

                            b1.Property<decimal>("AfterBalance")
                                .HasColumnType("numeric")
                                .HasColumnName("after_balance");

                            b1.Property<decimal>("BeforeBalance")
                                .HasColumnType("numeric")
                                .HasColumnName("before_balance");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at")
                                .HasDefaultValueSql("CURRENT_TIMESTAMP");

                            b1.Property<decimal>("Delta")
                                .HasColumnType("numeric")
                                .HasColumnName("delta");

                            b1.Property<long>("TransactionId")
                                .HasColumnType("bigint")
                                .HasColumnName("transaction_id");

                            b1.HasKey("Id");

                            b1.HasIndex("TransactionId");

                            b1.ToTable("transaction_log", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("TransactionLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
